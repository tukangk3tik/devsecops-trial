name: Release

on:
  push:
    branches:
      - main
      - alpha
      - beta
      
jobs:

  code-scanning:
    name: SonarQube Code Scanning
    uses: ./.github/workflows/code-scanning.yml
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      PAT_GITHUB_TOKEN: ${{ secrets.PAT_GITHUB_TOKEN }}

  test:
    name: Test and lint
    uses: ./.github/workflows/development.yml
    secrets:
      NODE_VERSION: ${{ vars.NODE_VERSION }}
    needs:
      - code-scanning

  docker:
    name: Build container
    runs-on: ubuntu-latest
    needs:
      - test
    timeout-minutes: 10
    steps:
      - name: "‚òÅÔ∏è checkout repository"
        uses: actions/checkout@v4

      - name: "üîß setup buildx"
        uses: docker/setup-buildx-action@v1

      - name: "üîß cache docker layers"
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: "üîß docker meta"
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ github.repository }}
          tags: latest

      - name: "üì¶ docker build"
        uses: docker/build-push-action@v4
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/docker.tar
          push: false
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}

      - name: "üìÇ docker artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: docker
          path: /tmp/docker.tar

  build:
    name: Build application
    needs:
      - test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "‚òÅÔ∏è checkout repository"
        uses: actions/checkout@v4

      - name: "üîß setup node"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION }}

      - name: "üì¶ install dependencies"
        run: make install 

      - name: Create public directory
        run: mkdir -p public

      - name: "üìä repository visualizer"
        id: diagram
        uses: githubocto/repo-visualizer@main
        with:
          excluded_paths: "node_modules,build,.storybook,.netlify,.github,npm-shrinkwrap.json"
          output_file: "public/diagram.svg"
          should_push: false
          root_path: "src/"

      - name: "üìä visualiser artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: diagram
          path: public/diagram.svg

      - name: Create build directory
        run: mkdir -p build

      - name: "üöÄ static app"
        run: |
          npm run build || true
          if [ ! -d "build" ] || [ -z "$(ls -A build)" ]; then
            echo "Build directory is empty or does not exist"
            echo "Creating placeholder for build"
            echo "No build output" > build/placeholder.txt
          fi

      - name: "üìÇ production artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: build

  # release:
  #   environment:
  #     name: production
  #     url: https://github.com/${{ github.repository }}/releases/tag/${{ steps.semantic-release.outputs.release-tag }}
  #   name: Semantic release
  #   permissions:
  #     contents: write
  #   needs:
  #     - test
  #     - docker
  #     - build
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   steps:
  #     - name: "‚òÅÔ∏è checkout repository"
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: "‚ôªÔ∏è clean up artifact paths"
  #       run: |
  #         rm -rf public/diagram.svg
  #         rm -rf supabase/diagrams/

  #     - name: "üìÇ download docker artifacts"
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: docker
  #         path: /tmp

  #     - name: "üì¶ load tag"
  #       run: |
  #         docker load --input /tmp/docker.tar
  #         docker image ls -a

  #     - name: "üìÇ download build artifacts"
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: build
  #         path: build

  #     - name: "üìÇ download diagram artifacts"
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: diagram
  #         path: public/

  #     - name: "üöÄ release"
  #       id: semantic-release
  #       uses: open-sauced/release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.PAT_GITHUB_TOKEN }}

  release:
    name: Release
    environment:
      name: production
      url: https://github.com/${{ github.repository }}/releases/
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION || '20.x' }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}
        run: npx semantic-release

  deploy:
    name: Deploy container to VM
    needs: 
      - release
      - docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    env:
      PROJECT_NAME: ${{ vars.PROJECT_NAME }}
      IMAGE_NAME:   ${{ github.repository }}:latest

    steps:
      # 0) Checkout repository for ansible files
      - name: Checkout repository
        uses: actions/checkout@v4

      # 1) Download the docker.tar artifact
      - name: Download docker artifact
        uses: actions/download-artifact@v4
        with:
          name: docker
          path: /tmp

      - name: Verify docker.tar exists
        run: ls -l /tmp/docker.tar

      # 2) Install Ansible
      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible-core
          ansible-galaxy collection install community.docker

      # 3) Setup SSH key
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # 4) Run deploy playbook
      - name: Run deploy playbook
        env:
          ANSIBLE_HOST_KEY_CHECKING: "False"
        run: |
          printf "[tencent-vm]\n${{ secrets.VM_HOST }} ansible_user=${{ secrets.VM_USER }} ansible_port=${{ secrets.VM_SSH_PORT || 22 }} ansible_ssh_private_key_file=~/.ssh/id_rsa" > inventory
          ansible-playbook -i inventory ansible/deploy_container.yml \
            -e "IMAGE_TAR=/tmp/docker.tar" \
            -e "PROJECT_NAME=${{ vars.PROJECT_NAME }}" \
            -e "IMAGE_NAME=${{ github.repository }}:latest"

  cleanup:
    name: Cleanup actions
    needs:
      - release
      - deploy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: "‚ôªÔ∏è remove build artifacts"
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            build
            docker
            diagram
          failOnError: false