- name: Deploy container
  hosts: tencent-vm
  become: yes
  vars:
    project_name: "{{ PROJECT_NAME | default('app') }}"
    image_name: "{{ IMAGE_NAME | default('REPO:latest') }}"
    tar_path:   "{{ IMAGE_TAR | default('/tmp/docker.tar') }}"
  tasks:
    - name: Check if Docker image tarball exists
      stat:
        path: "{{ tar_path }}"
      register: tarball_stat
      delegate_to: localhost

    - name: Fail if Docker image tarball is missing
      fail:
        msg: "Docker image tarball not found at {{ tar_path }}"
      when: not tarball_stat.stat.exists

    - name: Copy Docker image tarball
      copy:
        src: "{{ tar_path }}"
        dest: /tmp/docker.tar
        mode: '0644'

    - name: Load image
      shell: docker load --input /tmp/docker.tar

    - name: Stop and remove old container
      docker_container:
        name: "{{ project_name }}"
        state: absent
        force_kill: yes
      ignore_errors: yes

    - name: Run new container
      docker_container:
        name: "{{ project_name }}"
        image: "{{ image_name }}"
        state: started
        restart_policy: unless-stopped
        ports:
          - "0.0.0.0:7443:7443"  # Explicitly bind to all interfaces
        healthcheck:
          test: ["CMD-SHELL", "curl -f http://localhost:7443 || exit 1"]
          interval: 30s
          timeout: 10s
          retries: 3
          start_period: 30s
        detach: yes
        pull: false  # Don't pull since we're loading from tar
      register: container_result

    - name: Check container status
      debug:
        var: container_result

    - name: Wait for container to be healthy
      docker_container_info:
        name: "{{ project_name }}"
      register: container_info
      until: container_info.container.State.Health.Status == "healthy"
      retries: 10
      delay: 10
      ignore_errors: yes

    - name: Show container info
      debug:
        var: container_info.container.State